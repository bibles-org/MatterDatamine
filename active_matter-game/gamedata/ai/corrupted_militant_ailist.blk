repeat{
  name:t="corrupted_militant"

  reaction{
    event:t="onHit"

    sequencer{
      compareNode{
        lhsIntParam:t="scaryEnemy"
        operator:t="=="
        rhs:i=0
      }

      findDanger{
        paramName:t="scaryEnemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      cryForHelp{
        enemyParam:t="agent_dangers__lastHitReactionOffenderEid"
        radius:p2=10, 5
      }

      recalculateTree{}
    }
  }

  reaction{
    event:t="onBulletNearby"

    sequencer{
      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      recalculateTree{}
    }
  }

  sequencer{
    name:t="empty_gun"

    not{
      hasAmmoInGun{}
    }

    subTree{
      treeName:t="sub.reload"
    }
  }

  sequencer{
    name:t="escape_enemy"

    compareNode{
      lhsIntParam:t="scaryEnemy"
      operator:t=">"
      rhs:i=0
    }

    findFallbackNavmeshPoint{
      posParam:t="fallbackPosition"
      dist:r=10
      targetParam:t="scaryEnemy"
    }

    moveToPos{
      posParam:t="fallbackPosition"
      sprintTimerRange:p2=10, 20
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1
    }

    modifyNode{
      targetIntParam:t="scaryEnemy"
      operator:t="="
      arg:i=0
    }
  }

  exitHandler{
    sequencer{
      name:t="enemy_attack"

      reaction{
        name:t="enemy_attack_reaction"
        event:t="regularCheck"

        orderedSelector{
          failed{
            findObstaclesAlongsidePath{}
          }

          sequencer{
            not{
              hasAmmoInGun{}
            }

            recalculateTree{}
          }

          subTree{
            treeName:t="sub.corruptedMilitantReactions"
          }
        }
      }

      not{
        isUnderwater{}
      }

      copyIntVar{
        to:t="prevShootEnemy"
        from:t="shootEnemy"
      }

      findDanger{
        paramName:t="shootEnemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      copyIntVar{
        to:t="lastShootEnemy"
        from:t="shootEnemy"
      }

      ifThen{
        not{
          isVarsIntEqual{
            lhs:t="prevShootEnemy"
            rhs:t="shootEnemy"
          }
        }

        sequencer{
          setPosFromEntity{
            to:t="enemyPosition"
            from:t="shootEnemy"
          }

          wanderLook{
            posParam:t="enemyPosition"
            range:p2=0.6, 0.1
            timerMult:p2=0.1, 0.1
            clampRange:b=yes
            vertAim:b=yes
            ownTimer:b=yes
            lookTime:r=0.5
          }

          wanderLook{
            posParam:t="enemyPosition"
            range:p2=0.6, 0.1
            timerMult:p2=0.1, 0.1
            clampRange:b=yes
            vertAim:b=yes
            ownTimer:b=yes
            lookTime:r=0.5
          }
        }
      }

      chooseBestWeapon{
        targetParam:t="shootEnemy"
      }

      selector{
        selectStrategy:t="random"

        sequencer{
          traceNavmesh{
            posParam:t="wanderingPosition"
            posDestParam:t="wishShootFromPos"
            traceRange:p2=2, 4
            angDispersion:r=180
          }

          moveShoot{
            posParam:t="wishShootFromPos"
            targetUnitParam:t="shootEnemy"
            angleThreshold:r=180
            minStance:i=2
            shootTime:p2=0.2, 1
            cooldownTime:p2=0.1, 0.3
            minAimTime:p2=0.2, 0.4
            distThreshold:r=0.5
            maxAimSpeed:r=1050
            lostTargetCooldownRange:p2=3, 4
          }
        }

        selector{
          selectStrategy:t="ordered"

          sequencer{
            name:t="fallback_shoot"

            setPosFromEntity{
              to:t="enemyPosition"
              from:t="shootEnemy"
            }

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=5
            }

            findFallbackNavmeshPoint{
              posParam:t="fallbackPosition"
              dist:r=10
              targetParam:t="shootEnemy"
            }

            moveShoot{
              posParam:t="fallbackPosition"
              targetUnitParam:t="shootEnemy"
              angleThreshold:r=180
              minStance:i=2
              shootTime:p2=0.2, 1
              cooldownTime:p2=0.1, 0.3
              minAimTime:p2=0.2, 0.4
              distThreshold:r=0.5
              maxAimSpeed:r=1050
              lostTargetCooldownRange:p2=3, 4
            }
          }

          shootAtUnit{
            targetUnitParam:t="shootEnemy"
            minStance:i=1
            shootTime:p2=0.2, 0.7
            cooldownTime:p2=0.1, 0.9
            minAimTime:p2=0.2, 0.4
            maxAimSpeed:r=720
            maxTrackSpeed:r=360
            lostTargetCooldownRange:p2=3, 4
          }
        }
      }
    }

    sequencer{
      ifThenElse{
        checkTarget{
          targetUnitParam:t="shootEnemy"
        }

        sequencer{
          copyIntVar{
            to:t="lastKnownEnemy"
            from:t="shootEnemy"
          }

          setPosFromEntity{
            to:t="laskKnownEnemyPosition"
            from:t="shootEnemy"
          }
        }

        continue{}
      }

      setIntVar{
        to:t="shootEnemy"
        value:i=0
      }
    }
  }

  exitHandler{
    sequencer{
      name:t="investigate_enemy"

      reaction{
        name:t="investigate_reaction"
        event:t="regularCheck"

        subTree{
          treeName:t="sub.corruptedMilitantReactions"
        }
      }

      not{
        isVarsIntEqual{
          lhs:t="lastKnownEnemy"
          rhs_value:i=0
        }
      }

      not{
        isVarsIntEqual{
          lhs:t="lastKnownEnemy"
          rhs_value:i=-1
        }
      }

      moveToPos{
        posParam:t="laskKnownEnemyPosition"
        minStance:i=1
        distThreshold:r=2.5
        lookVisc:r=0.1
        targetParam:t="lastShootEnemy"
        timeToLookAtTarget:r=4
        dangerPosParam:t="enemyPos"
        dangerValidParam:t="enemyPosValid"
        dangerLookRange:p2=1.5, 2.5
      }
    }

    setIntVar{
      to:t="lastKnownEnemy"
      value:i=0
    }
  }

  sequencer{
    name:t="wander"

    reaction{
      name:t="wander_reaction"
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        findObstaclesAlongsidePath{}
        subTree{
          treeName:t="sub.corruptedMilitantReactions"
        }
      }
    }

    findPosInTm{
      posParam:t="wanderingPosition"
      tmParam:t="corrupted_militant__regionTm"
    }

    moveToPos{
      posParam:t="wanderingPosition"
      minStance:i=1
      lookVisc:r=0.1
      targetParam:t="lastShootEnemy"
      timeToLookAtTarget:r=4
      tryClimbing:b=yes
      dangerPosParam:t="enemyPos"
      dangerValidParam:t="enemyPosValid"
      dangerLookRange:p2=1.5, 2.5
    }

    selector{
      sequencer{
        findDanger{
          paramName:t="potentialEnemy"
          radiusParamName:t="enemyRadius"
          minDanger:r=0.1
        }

        selectNode{
          name:t="enemy_attack"
        }
      }

      wait{
        range:p2=0.1, 3
        resetable:b=yes
      }
    }
  }
}

selector{
  name:t="sub.corruptedMilitantReactions"
  selectStrategy:t="ordered"
  selectOnSuccess:b=yes

  sequencer{
    name:t="danger_rc"

    orderedSelector{
      sequencer{
        findDanger{
          paramName:t="newEnemy"
          radiusParamName:t="enemyRadius"
          minDanger:r=0.1
        }

        copyIntVar{
          to:t="prevEnemy"
          from:t="shootEnemy"
        }

        chooseDanger{
          lhsParam:t="shootEnemy"
          rhsParam:t="newEnemy"
          outParam:t="potentialEnemy"
          diff:r=0.2
          minDanger:r=0.1
        }

        ifThenElse{
          chooseBestWeapon{
            targetParam:t="potentialEnemy"
          }

          sequencer{
            orderedSelector{
              isVarsIntEqual{
                lhs:t="prevEnemy"
                rhs:t="potentialEnemy"
              }

              recalculateTree{}
            }
          }

          sequencer{
            setPosFromEntity{
              to:t="enemyPosition"
              from:t="potentialEnemy"
            }

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=20
            }

            recalculateTree{}
          }
        }
      }

      sequencer{
        checkTarget{
          targetUnitParam:t="shootEnemy"
        }

        setIntVar{
          to:t="shootEnemy"
          value:i=0
        }

        chooseBestWeapon{
          targetParam:t="shootEnemy"
        }

        recalculateTree{}
      }
    }
  }
}
