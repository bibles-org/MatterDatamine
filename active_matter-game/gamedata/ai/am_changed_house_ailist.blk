orderedSelector{
  name:t="house_dweller"

  reaction{
    event:t="onHit"

    sequencer{
      setTime{
        to:t="agent_dangers__lastAgroTime"
      }

      triggerChangedsAroundOnHit{}
      compareNode{
        lhs:t="beh_tree__interruptDisabled"
        operator:t="=="
        rhs:r=0
      }

      orderedSelector{
        findDangerInParent{}
        findFlankableTarget{
          useLargeRadius:b=no
          backupTarget:t="agent_dangers__lastHitReactionOffenderEid"
          minDanger:r=0.1
        }
      }

      selectNode{
        name:t="attack"
      }
    }
  }

  reaction{
    event:t="onBulletNearby"

    sequencer{
      compareNode{
        lhs:t="beh_tree__interruptDisabled"
        operator:t="=="
        rhs:r=0
      }

      findDangerInParent{}
      findFlankableTarget{
        useLargeRadius:b=no
        backupTarget:t="agent_dangers__lastHitReactionOffenderEid"
        minDanger:r=0.1
      }

      selectNode{
        name:t="attack"
      }
    }
  }

  reaction{
    event:t="onBlindness"

    sequencer{
      modifyNode{
        target:t="beh_tree__interruptDisabled"
        operator:t="="
        arg:i=0
      }

      recalculateTree{}
    }
  }

  reaction{
    name:t="set inhouse time"
    event:t="regularCheck"

    orderedSelector{
      compareNode{
        lhs:t="beh_tree__interruptDisabled"
        operator:t="=="
        rhs:r=1
      }

      sequencer{
        isInParent{}
        setTime{
          to:t="household_monster__lastInhouseTime"
        }
      }
    }
  }

  subTree{
    treeName:t="sub.blindness"
  }

  subTree{
    treeName:t="sub.leave_obstacle"
  }

  failed{
    subTree{
      treeName:t="sub.return_to_navmesh"
    }
  }

  sequencer{
    name:t="attack"

    reaction{
      event:t="regularCheck"

      orderedSelector{
        compareNode{
          lhs:t="beh_tree__interruptDisabled"
          operator:t="=="
          rhs:r=1
        }

        sequencer{
          isInParent{}
          setTime{
            to:t="household_monster__lastInhouseTime"
          }

          failed{}
        }

        subTree{
          treeName:t="sub.attackReaction"
        }

        subTree{
          treeName:t="sub.tooFarOutsideReaction"
        }
      }
    }

    orderedSelector{
      compareNode{
        lhs:t="walker_agent__targetEid"
        operator:t="!="
        rhs:i=0
      }

      findDangerInParent{}
      findFlankableTarget{
        useLargeRadius:b=no
        backupTarget:t="agent_dangers__lastHitReactionOffenderEid"
        minDanger:r=0.1
      }
    }

    sequencer{
      subTree{
        treeName:t="sub.changed.runToAndAttack"
      }
    }
  }

  sequencer{
    name:t="try_attack_again"

    orderedSelector{
      isInParent{}
      sequencer{
        checkDistanceToParent{
          radiusParam:t="household_monster__maxOutsideDst"
        }

        not{
          hasTimePassed{
            from:t="household_monster__lastInhouseTime"
            duration:t="household_monster__loseTargetOutsideIn"
          }
        }
      }
    }

    findFlankableTarget{
      useLargeRadius:b=yes
      minDanger:r=0.1
    }

    selectNode{
      name:t="attack"
    }
  }

  sequencer{
    name:t="attraction"

    reaction{
      event:t="regularCheck"

      orderedSelector{
        compareNode{
          lhs:t="beh_tree__interruptDisabled"
          operator:t="=="
          rhs:r=1
        }

        subTree{
          treeName:t="sub.tooFarOutsideReaction"
        }
      }
    }

    subTree{
      treeName:t="sub.changed.moveToAttraction"
    }
  }

  sequencer{
    name:t="goto sleep"

    reaction{
      event:t="regularCheck"

      orderedSelector{
        compareNode{
          lhs:t="beh_tree__interruptDisabled"
          operator:t="=="
          rhs:r=1
        }

        selector{
          selectStrategy:t="ordered"
          selectOnSuccess:b=yes

          subTree{
            treeName:t="sub.clearPath"
          }

          findFlankableTarget{
            useLargeRadius:b=no
            backupTarget:t="agent_dangers__lastHitReactionOffenderEid"
            minDanger:r=0.1
          }

          sequencer{
            nFindAttractPosition{
              posParam:t="walker_agent__targetPos"
            }

            selectNode{
              name:t="moveToAttraction"
            }
          }

          subTree{
            treeName:t="sub.recalculateTreeOnStuck"
          }
        }
      }
    }

    orderedSelector{
      orderedSelector{
        compareNode{
          lhs:t="walker_agent__targetEid"
          operator:t="=="
          rhs:i=0
        }

        failed{
          sequencer{
            setBlind{
              duration:p2=3, 7
            }

            successChance{
              chance:r=0.2
            }

            modifyNode{
              target:t="walker_agent__targetEid"
              operator:t="="
              arg:i=0
            }
          }
        }
      }

      sequencer{
        modifyNode{
          targetIntParam:t="enemy"
          operator:t="="
          arg:t="walker_agent__targetEid"
        }

        not{
          checkTarget{
            targetUnitParam:t="enemy"
          }
        }

        modifyNode{
          target:t="walker_agent__targetEid"
          operator:t="="
          arg:i=0
        }
      }
    }

    orderedSelector{
      not{
        findDangerInParent{}
      }

      setBlind{
        duration:p2=3, 7
      }
    }

    findRndNavPosInParent{
      posParam:t="walker_agent__targetPos"
    }

    moveToPosWithBlinks{
      posParam:t="walker_agent__targetPos"
      forceToWalk:b=yes
      navLookAhead:r=0.75
      blinkPeriod:p2=0.1, 0.7
    }

    nPhysForceAnimState{
      animState:t="lie_down"
      duration:r=1.1
    }

    addTemplate{
      name:t="sleeping_monster"
    }
  }

  subTree{
    treeName:t="sub.door_opener"
  }
}

sequencer{
  name:t="sub.tooFarOutsideReaction"

  not{
    isInParent{}
  }

  orderedSelector{
    sequencer{
      hasTimePassed{
        from:t="agent_dangers__lastAgroTime"
        duration:t="household_monster__loseTargetOutsideIn"
      }

      hasTimePassed{
        from:t="household_monster__lastInhouseTime"
        duration:t="household_monster__loseTargetOutsideIn"
      }
    }

    not{
      checkDistanceToParent{
        radiusParam:t="household_monster__maxOutsideDst"
      }
    }
  }

  modifyNode{
    target:t="walker_agent__targetEid"
    operator:t="="
    arg:i=0
  }

  selectNode{
    name:t="sub.changed.goToOrigin"
  }
}
