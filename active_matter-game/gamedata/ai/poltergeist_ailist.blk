repeat{
  name:t="poltergeist"

  exitHandler{
    repeatUntilFail{
      name:t="poltergeist_attack"

      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
      }

      modifyNode{
        target:t="poltergeist__selectedEnemy"
        operator:t="="
        argIntParam:t="enemy"
      }

      poltergeistFindObjectToThrowAtEnemy{
        enemyEcsParam:t="poltergeist__selectedEnemy"
      }

      modifyNode{
        target:t="poltergeist__isAttacking"
        operator:t="="
        arg:b=yes
      }

      orderedSelector{
        parallel{
          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="poltergeist__selectedRiPos"
            stopDist:r=1
          }

          failed{
            wait{
              range:p2=10, 10
              resetable:b=yes
            }
          }
        }

        failed{
          poltergeistMarkSelectedRiAsUnreachable{}
        }
      }

      poltergeistThrowObjectAtEnemy{}
      wait{
        range:p2=1, 3
        resetable:b=yes
      }
    }

    modifyNode{
      target:t="poltergeist__isAttacking"
      operator:t="="
      arg:b=no
    }
  }

  sequencer{
    name:t="poltergeist_go_away"

    subTree{
      treeName:t="sub.poltergeist_should_go_away"
    }

    success{
      findSafePos{
        posParam:t="poltergeist__hideAwayPos"
        enemyParam:t="poltergeist__selectedEnemy"
        defaultPosParam:t="poltergeist__hideAwayPos"
        overwrite:b=yes
      }
    }

    parallel{
      repeatUntilFail{
        wait{
          range:p2=2, 4
          resetable:b=yes
        }

        subTree{
          treeName:t="sub.poltergeist_should_go_away"
        }
      }

      sequencer{
        success{
          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="poltergeist__selectedRiPos"
            stopDist:r=1
          }
        }

        wait{
          range:p2=15, 20
          resetable:b=yes
        }
      }
    }

    subTree{
      treeName:t="sub.poltergeist_should_go_away"
    }

    destroyEntity{}
  }
}

orderedSelector{
  name:t="sub.poltergeist_should_go_away"

  not{
    findDanger{
      paramName:t="enemy"
      radiusParamName:t="enemyRadius"
    }
  }

  sequencer{
    modifyNode{
      target:t="poltergeist__selectedEnemy"
      operator:t="="
      argIntParam:t="enemy"
    }

    not{
      poltergeistFindObjectToThrowAtEnemy{
        enemyEcsParam:t="poltergeist__selectedEnemy"
      }
    }
  }
}
