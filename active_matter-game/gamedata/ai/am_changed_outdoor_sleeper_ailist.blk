orderedSelector{
  name:t="nchanged_outdoor_sleeper"

  reaction{
    event:t="onHit"

    sequencer{
      orderedSelector{
        compareNode{
          lhs:t="beh_tree__interruptDisabled"
          operator:t="=="
          rhs:r=1
        }

        sequencer{
          findFlankableTarget{
            useLargeRadius:b=yes
            backupTarget:t="agent_dangers__lastHitReactionOffenderEid"
            minDanger:r=0.1
          }

          selectNode{
            name:t="attack"
          }
        }

        sequencer{
          setBlind{
            duration:p2=2, 5
          }

          recalculateTree{}
        }
      }
    }
  }

  reaction{
    event:t="onBulletNearby"

    sequencer{
      compareNode{
        lhs:t="beh_tree__interruptDisabled"
        operator:t="=="
        rhs:r=0
      }

      findFlankableTarget{
        useLargeRadius:b=yes
        minDanger:r=0.1
      }

      selectNode{
        name:t="attack"
      }
    }
  }

  reaction{
    event:t="onBlindness"

    sequencer{
      modifyNode{
        target:t="beh_tree__interruptDisabled"
        operator:t="="
        arg:i=0
      }

      recalculateTree{}
    }
  }

  subTree{
    treeName:t="sub.blindness"
  }

  subTree{
    treeName:t="sub.leave_obstacle"
  }

  failed{
    subTree{
      treeName:t="sub.return_to_navmesh"
    }
  }

  sequencer{
    name:t="attack"

    reaction{
      event:t="regularCheck"

      orderedSelector{
        compareNode{
          lhs:t="beh_tree__interruptDisabled"
          operator:t="=="
          rhs:r=1
        }

        subTree{
          treeName:t="sub.attackReaction"
        }

        subTree{
          treeName:t="sub.checkOutOfOrigin"
        }
      }
    }

    subTree{
      treeName:t="sub.changed.runToAndAttack"
    }
  }

  sequencer{
    name:t="try_attack_again"

    orderedSelector{
      compareNode{
        lhs:t="changed__loseInterestAt"
        operator:t="<="
        rhs:r=0
      }

      sequencer{
        setTime{
          to:t="agent_dangers__time"
        }

        compareNode{
          lhs:t="changed__loseInterestAt"
          operator:t=">"
          rhs:t="agent_dangers__time"
        }
      }
    }

    findFlankableTarget{
      useLargeRadius:b=yes
      minDanger:r=0.1
    }

    selectNode{
      name:t="attack"
    }
  }

  subTree{
    treeName:t="sub.changed.moveToAttraction"
  }

  subTree{
    treeName:t="sub.aimlessly_walk_around_after_awaken"
  }

  subTree{
    treeName:t="sub.changed.goToOrigin"
  }

  subTree{
    treeName:t="sub.door_opener"
  }
}

sequencer{
  name:t="sub.checkOutOfOrigin"

  compareNode{
    lhs:t="changed__loseInterestAt"
    operator:t=">"
    rhs:r=0
  }

  setTime{
    to:t="agent_dangers__time"
  }

  compareNode{
    lhs:t="changed__loseInterestAt"
    operator:t="<"
    rhs:t="agent_dangers__time"
  }

  modifyNode{
    target:t="walker_agent__targetEid"
    operator:t="="
    arg:i=0
  }

  selectNode{
    name:t="sub.changed.goToOrigin"
  }
}
