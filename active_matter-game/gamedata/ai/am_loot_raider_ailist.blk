repeat{
  name:t="loot_raider"

  reaction{
    event:t="onHit"

    sequencer{
      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      recalculateTree{}
    }
  }

  reaction{
    event:t="onBulletNearby"

    sequencer{
      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      recalculateTree{}
    }
  }

  reaction{
    event:t="onBlindness"

    sequencer{
      recalculateTree{}
    }
  }

  sequencer{
    name:t="empty_gun"

    not{
      hasAmmoInGun{}
    }

    subTree{
      treeName:t="sub.reload"
    }
  }

  sequencer{
    name:t="blindness"

    isInBlindness{}
    findRandomNavmeshPoint{
      posParam:t="fallbackPosition"
      dist:r=10
    }

    parallel{
      inBlindness{}
      moveToPos{
        posParam:t="fallbackPosition"
        sprintTimerRange:p2=10, 20
        minDistToSprint:r=0.5
        tryClimbing:b=yes
        distThreshold:r=1
        deflectPath:b=yes
        maxDeflectionAngle:r=1.047
        minCurvedPathlenThreshold:r=20
      }
    }
  }

  sequencer{
    name:t="self_extinguish"

    reaction{
      event:t="regularCheck"
    }

    isBurning{}
    parallel{
      success{
        sequencer{
          findDanger{
            paramName:t="shootEnemy"
            radiusParamName:t="enemyRadius"
            minDanger:r=0.1
          }

          findFallbackNavmeshPoint{
            posParam:t="hidePosition"
            dist:r=10
            targetParam:t="shootEnemy"
          }

          moveToPos{
            posParam:t="hidePosition"
            sprintTimerRange:p2=10, 20
            minDistToSprint:r=10
            lookVisc:r=0.1
          }
        }
      }

      extinguish{}
    }

    extinguish{}
    wait{
      range:p2=0.05, 0.1
      resetable:b=yes
    }
  }

  sequencer{
    name:t="self_heal"

    reaction{
      event:t="onAttract"

      recalculateTree{}
    }

    orderedSelector{
      successChance{
        chance:r=0.8
      }

      findDanger{
        paramName:t="hideFromEnemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
        tag:t="human"
        canBeInVehicle:b=no
      }

      subTree{
        treeName:t="sub.trySelfHeal"
      }
    }
  }

  sequencer{
    name:t="hide_or_melee"

    findDanger{
      paramName:t="hideFromEnemy"
      radiusParamName:t="enemyRadius"
      minDanger:r=0.1
      tag:t="human"
      canBeInVehicle:b=no
    }

    not{
      chooseBestWeapon{
        targetParam:t="hideFromEnemy"
      }
    }

    orderedSelector{
      sequencer{
        reaction{
          name:t="melee_reaction"
          event:t="regularCheck"

          orderedSelector{
            failed{
              findObstaclesAlongsidePath{}
            }

            subTree{
              treeName:t="sub.lootRaiderReactions"
            }
          }
        }

        setPosFromEntity{
          to:t="enemyPosition"
          from:t="hideFromEnemy"
        }

        checkDistance{
          posParam:t="enemyPosition"
          radius:r=3
        }

        not{
          isInstallingWeaponMod{}
        }

        changeWeapon{
          param:t="meleeWeaponSlot"
        }

        moveToTarget{
          targetUnitParam:t="hideFromEnemy"
          stopDistRange:p2=3, 3
          aimToTarget:b=yes
        }

        meleeAttack{
          targetUnitParam:t="hideFromEnemy"
          timeToAttack:r=1
          attackDist:r=1.5
        }
      }

      sequencer{
        reaction{
          name:t="hide_reaction"
          event:t="regularCheck"

          orderedSelector{
            failed{
              findObstaclesAlongsidePath{}
            }

            subTree{
              treeName:t="sub.lootRaiderReactions"
            }
          }
        }

        reaction{
          event:t="onAttract"

          recalculateTree{}
        }

        isAgentInsideZone{}
        findFallbackNavmeshPoint{
          posParam:t="hidePosition"
          dist:r=30
          targetParam:t="hideFromEnemy"
        }

        orderedSelector{
          sequencer{
            successChance{
              chance:r=0
            }

            moveToPos{
              posParam:t="hidePosition"
              minStance:i=1
              lookVisc:r=0.1
              deflectPath:b=yes
              maxDeflectionAngle:r=1.047
              minCurvedPathlenThreshold:r=20
            }
          }

          zigZagEscape{
            wishPosParam:t="hidePosition"
            stepDistRange:p2=5, 8
            scatterMultiplierRange:p2=0.5, 0.75
            sprintTimerRange:p2=10, 20
            minDistToSprint:r=0.5
            lookVisc:r=0.1
          }
        }
      }
    }
  }

  sequencer{
    name:t="changed_interaction"

    reaction{
      name:t="changed_interaction_reaction"
      event:t="regularCheck"

      orderedSelector{
        failed{
          findObstaclesAlongsidePath{}
        }

        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    findDanger{
      paramName:t="changedEnemy"
      radiusParamName:t="enemyRadius"
      minDanger:r=0.1
      tag:t="changed_human"
      canBeInVehicle:b=no
    }

    setPosFromEntity{
      to:t="dangerPosition"
      from:t="changedEnemy"
    }

    orderedSelector{
      sequencer{
        name:t="changed_shoot"

        sequencer{
          not{
            targetIsSleeping{
              targetParam:t="changedEnemy"
            }
          }

          dangerCount{
            posParam:t="dangerPosition"
            radius:r=10
            includeDangerTag:t="changed_human"
            excludeEcsTag:t="sleeping_monster"
            countParam:t="changedCount"
          }

          compareNode{
            lhsIntParam:t="changedCount"
            operator:t=">="
            rhs:i=3
          }
        }

        selectNode{
          name:t="enemy_attack"
        }
      }

      sequencer{
        name:t="changed_melee"

        orderedSelector{
          not{
            targetIsSleeping{
              targetParam:t="changedEnemy"
            }
          }

          sequencer{
            dangerCount{
              posParam:t="dangerPosition"
              radius:r=10
              includeDangerTag:t="changed_human"
              countParam:t="changedCount"
            }

            compareNode{
              lhsIntParam:t="changedCount"
              operator:t="=="
              rhs:i=1
            }
          }
        }

        setPosFromEntity{
          to:t="enemyPosition"
          from:t="changedEnemy"
        }

        checkDistance{
          posParam:t="enemyPosition"
          radius:r=15
        }

        not{
          isInstallingWeaponMod{}
        }

        changeWeapon{
          param:t="meleeWeaponSlot"
        }

        moveToTarget{
          targetUnitParam:t="changedEnemy"
          stopDistRange:p2=3, 3
          aimToTarget:b=yes
        }

        meleeAttack{
          targetUnitParam:t="changedEnemy"
          timeToAttack:r=1
          attackDist:r=1.5
        }
      }

      sequencer{
        name:t="changed_hide"

        isAgentInsideZone{}
        findFallbackNavmeshPoint{
          posParam:t="hidePosition"
          dist:r=30
          targetParam:t="changedEnemy"
        }

        moveToPos{
          posParam:t="hidePosition"
          minStance:i=1
          lookVisc:r=0.1
          deflectPath:b=yes
          maxDeflectionAngle:r=1.047
          minCurvedPathlenThreshold:r=20
        }
      }
    }
  }

  exitHandler{
    name:t="shoot_from_ri_cover"

    repeatUntilFail{
      count:i=10

      reaction{
        name:t="shoot_from_ri_cover_reaction"
        event:t="regularCheck"

        orderedSelector{
          failed{
            findObstaclesAlongsidePath{}
          }

          sequencer{
            not{
              hasAmmoInGun{}
            }

            recalculateTree{}
          }

          subTree{
            treeName:t="sub.lootRaiderReactions"
          }
        }
      }

      not{
        isUnderwater{}
      }

      subTree{
        treeName:t="sub.findRiCoverIfPrevExpired"
      }

      setTimer{
        target:t="bot_with_ri_covers__coverExpireAt"
        deltaTime:r=20
      }

      orderedSelector{
        compareNode{
          lhs:t="bot_with_ri_covers__isBehindCover"
          operator:t="=="
          rhs:b=yes
        }

        sequencer{
          name:t="go_behind_cover"

          success{
            moveShoot{
              posParam:t="behindCoverPosition"
              targetUnitParam:t="shootFromCoverEnemy"
              angleThreshold:r=180
              chooseStance:b=no
              shootTime:p2=0.2, 1
              cooldownTime:p2=0.2, 0.8
              minAimTime:p2=0.2, 0.4
              distThreshold:r=0.05
              maxAimSpeed:r=1050
              time:p2=10, 15
              lostTargetCooldownRange:p2=3, 4
            }
          }

          riCoversFindSafePos{
            posParam:t="behindCoverPosition"
            targetUnitParam:t="shootFromCoverEnemy"
          }

          orderedSelector{
            riCoversIsNearSafePos{
              posParam:t="behindCoverPosition"
              maxDist:r=0.4
            }

            moveToPos{
              posParam:t="behindCoverPosition"
              minStance:i=1
              lookVisc:r=0.1
              targetParam:t="shootFromCoverEnemy"
              timeToLookAtTarget:r=10
              tryClimbing:b=yes
              dangerPosParam:t="shootFromCoverEnemy"
              dangerValidParam:t="enemyPosValid"
              dangerLookRange:p2=1.5, 2.5
              distThreshold:r=0.05
              sprintTimerRange:p2=10, 20
            }
          }

          not{
            sequencer{
              orderedSelector{
                checkDistance{
                  posParam:t="shootFromCoverEnemyPosition"
                  radius:r=8
                }

                not{
                  isAgentInsideZone{
                    checkZoneTargetState:b=no
                  }
                }
              }

              resetTimer{
                target:t="bot_with_ri_covers__coverExpireAt"
              }
            }
          }

          wait{
            range:p2=0.6, 1.2
            resetable:b=yes
          }

          riCoversSetPeekFromCoverPos{
            posParam:t="peekPosition"
          }

          modifyNode{
            target:t="bot_with_ri_covers__isBehindCover"
            operator:t="="
            arg:b=yes
          }
        }
      }

      sequencer{
        name:t="peek_from_cover"

        moveToPos{
          posParam:t="peekPosition"
          minStance:i=1
          lookVisc:r=0.1
          targetParam:t="shootFromCoverEnemy"
          timeToLookAtTarget:r=10
          tryClimbing:b=yes
          dangerPosParam:t="shootFromCoverEnemyPosition"
          dangerValidParam:t="enemyPosValid"
          dangerLookRange:p2=1.5, 2.5
          distThreshold:r=0.05
          sprintTimerRange:p2=10, 20
        }

        modifyNode{
          target:t="bot_with_ri_covers__isBehindCover"
          operator:t="="
          arg:b=no
        }

        success{
          shootAtUnit{
            targetUnitParam:t="shootFromCoverEnemy"
            minStance:i=1
            shootTime:p2=0.1, 0.4
            chooseStance:b=no
            cooldownTime:p2=0.1, 0.3
            minAimTime:p2=0.1, 0.2
            maxAimSpeed:r=720
            maxTrackSpeed:r=360
            time:p2=0.1, 1
            lostTargetCooldownRange:p2=3, 4
          }
        }
      }

      resetTimer{
        target:t="bot_with_ri_covers__coverExpireAt"
      }
    }

    sequencer{
      riCoversSaveCurPos{}
    }
  }

  exitHandler{
    name:t="enemy_attack"

    sequencer{
      reaction{
        name:t="enemy_attack_reaction"
        event:t="regularCheck"

        orderedSelector{
          failed{
            findObstaclesAlongsidePath{}
          }

          ifThen{
            not{
              amCheckTargetVisibility{
                targetUnitParam:t="shootEnemy"
                rayMat:t="aiRay"
              }
            }

            sequencer{
              copyIntVar{
                to:t="lastKnownEnemy"
                from:t="shootEnemy"
              }

              setPosFromEntity{
                to:t="laskKnownEnemyPosition"
                from:t="lastKnownEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              recalculateTree{}
            }
          }

          sequencer{
            not{
              hasAmmoInGun{}
            }

            recalculateTree{}
          }

          subTree{
            treeName:t="sub.lootRaiderReactions"
          }
        }
      }

      not{
        isUnderwater{}
      }

      chooseBestWeapon{
        targetParam:t="shootEnemy"
      }

      copyIntVar{
        to:t="prevShootEnemy"
        from:t="shootEnemy"
      }

      findDanger{
        paramName:t="shootEnemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
      }

      copyIntVar{
        to:t="lastShootEnemy"
        from:t="shootEnemy"
      }

      ifThen{
        not{
          isVarsIntEqual{
            lhs:t="prevShootEnemy"
            rhs:t="shootEnemy"
          }
        }

        sequencer{
          setPosFromEntity{
            to:t="enemyPosition"
            from:t="shootEnemy"
          }

          wanderLook{
            posParam:t="enemyPosition"
            range:p2=0.6, 0.1
            timerMult:p2=0.1, 0.1
            clampRange:b=yes
            vertAim:b=yes
            ownTimer:b=yes
            lookTime:r=0.5
          }
        }
      }

      chooseBestWeapon{
        targetParam:t="shootEnemy"
      }

      randomSelector{
        sequencer{
          traceNavmesh{
            posParam:t="wanderingPosition"
            posDestParam:t="wishShootFromPos"
            traceRange:p2=2, 4
            angDispersion:r=180
          }

          moveShoot{
            posParam:t="wishShootFromPos"
            targetUnitParam:t="shootEnemy"
            angleThreshold:r=180
            minStance:i=2
            shootTime:p2=0.2, 1
            chooseStance:b=no
            cooldownTime:p2=0.1, 0.3
            minAimTime:p2=0.2, 0.4
            distThreshold:r=0.5
            maxAimSpeed:r=1050
            lostTargetCooldownRange:p2=3, 4
          }
        }

        orderedSelector{
          sequencer{
            name:t="fallback_shoot"

            setPosFromEntity{
              to:t="enemyPosition"
              from:t="shootEnemy"
            }

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=5
            }

            findFallbackNavmeshPoint{
              posParam:t="fallbackPosition"
              dist:r=10
              targetParam:t="shootEnemy"
            }

            moveShoot{
              posParam:t="fallbackPosition"
              targetUnitParam:t="shootEnemy"
              angleThreshold:r=180
              minStance:i=2
              shootTime:p2=0.2, 1
              cooldownTime:p2=0.1, 0.3
              chooseStance:b=no
              minAimTime:p2=0.2, 0.4
              distThreshold:r=0.5
              maxAimSpeed:r=1050
              lostTargetCooldownRange:p2=3, 4
            }
          }

          shootAtUnit{
            targetUnitParam:t="shootEnemy"
            minStance:i=1
            shootTime:p2=0.2, 0.7
            cooldownTime:p2=0.1, 0.9
            minAimTime:p2=0.2, 0.4
            maxAimSpeed:r=720
            maxTrackSpeed:r=360
            lostTargetCooldownRange:p2=3, 4
          }
        }
      }
    }

    sequencer{
      ifThenElse{
        checkTarget{
          targetUnitParam:t="shootEnemy"
        }

        sequencer{
          copyIntVar{
            to:t="lastKnownEnemy"
            from:t="shootEnemy"
          }

          setPosFromEntity{
            to:t="laskKnownEnemyPosition"
            from:t="shootEnemy"
          }
        }

        continue{}
      }

      setIntVar{
        to:t="shootEnemy"
        value:i=0
      }
    }
  }

  exitHandler{
    name:t="investigate_enemy"

    sequencer{
      reaction{
        name:t="investigate_reaction"
        event:t="regularCheck"

        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }

      not{
        isVarsIntEqual{
          lhs:t="lastKnownEnemy"
          rhs_value:i=0
        }
      }

      not{
        isVarsIntEqual{
          lhs:t="lastKnownEnemy"
          rhs_value:i=-1
        }
      }

      moveToPos{
        posParam:t="laskKnownEnemyPosition"
        minStance:i=1
        distThreshold:r=2.5
        lookVisc:r=0.1
        targetParam:t="lastShootEnemy"
        timeToLookAtTarget:r=4
        dangerPosParam:t="enemyPos"
        dangerValidParam:t="enemyPosValid"
        dangerLookRange:p2=1.5, 2.5
      }
    }

    setIntVar{
      to:t="lastKnownEnemy"
      value:i=0
    }
  }

  sequencer{
    name:t="go_to_attract"

    reaction{
      name:t="go_to_attract_reaction"
      event:t="regularCheck"

      orderedSelector{
        findObstaclesAlongsidePath{}
        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    getAttractionPosition{}
    modifyNode{
      targetIntParam:t="attractPointEntity"
      operator:t="="
      arg:t="attract_point__eid"
    }

    setPosFromEntity{
      to:t="attractPosition"
      from:t="attractPointEntity"
    }

    moveToPos{
      posParam:t="attractPosition"
      minStance:i=1
      distThreshold:r=2.5
      lookVisc:r=0.1
      targetParam:t="lastShootEnemy"
      timeToLookAtTarget:r=4
      tryClimbing:b=yes
      dangerPosParam:t="enemyPos"
      dangerValidParam:t="enemyPosValid"
      dangerLookRange:p2=1.5, 2.5
    }

    wait{
      range:p2=0.5, 1
      resetable:b=yes
    }
  }

  exitHandler{
    name:t="wander"

    sequencer{
      reaction{
        name:t="wander_reaction"
        event:t="regularCheck"

        orderedSelector{
          failed{
            chooseBestWeapon{}
          }

          findObstaclesAlongsidePath{}
          sequencer{
            successChance{
              chance:r=0.075
            }

            hasMagazinesToLoad{}
            selectNode{
              name:t="load_ammo_magazines"
            }
          }

          subTree{
            treeName:t="sub.lootRaiderReactions"
          }

          sequencer{
            name:t="loot_rc"

            findLoot{
              traceDist:r=7
              lootTargetParam:t="lootEntity"
              maxPickupVolume:i=10
            }

            setPosFromEntity{
              to:t="lootPosition"
              from:t="lootEntity"
            }

            selectNode{
              name:t="watch_loot"
            }
          }

          sequencer{
            name:t="loot_interatables"

            findInteractableWithLoot{
              radius:r=7
              lootTargetParam:t="interactableEntity"
            }

            selectNode{
              name:t="loot_from_interactable"
            }
          }
        }
      }

      reaction{
        event:t="onAttract"

        recalculateTree{}
      }

      compareNode{
        lhs:t="am_bot__lootCount"
        operator:t="<"
        rhs:t="am_bot__extractAtLootCount"
      }

      orderedSelector{
        sequencer{
          compareNode{
            lhs:t="am_bot__attractRegionStayTimer"
            operator:t=">"
            rhs:r=0
          }

          orderedSelector{
            sequencer{
              name:t="inAttractRegion"

              isRegionCenter{
                posParam:t="am_bot__targetAttractRegionPos"
              }

              findRandomNavmeshPointInRegionByEid{
                regionParam:t="am_bot__targetAttractRegionPos"
                posParam:t="wanderingPosition"
                radius:r=30
              }

              moveToPos{
                posParam:t="wanderingPosition"
                minStance:i=1
                lookVisc:r=0.1
                targetParam:t="lastShootEnemy"
                timeToLookAtTarget:r=4
                tryClimbing:b=yes
                dangerPosParam:t="enemyPos"
                dangerValidParam:t="enemyPosValid"
                dangerLookRange:p2=1.5, 2.5
              }
            }

            sequencer{
              name:t="nearActiveMattery"

              findSafePosAroundAttractPos{
                attractPos:t="am_bot__targetAttractRegionPos"
                posParam:t="wanderingPosition"
                radius:r=15
                tries:i=10
              }

              moveToPos{
                posParam:t="wanderingPosition"
                minStance:i=1
                lookVisc:r=0.1
                targetParam:t="lastShootEnemy"
                timeToLookAtTarget:r=4
                tryClimbing:b=yes
                dangerPosParam:t="enemyPos"
                dangerValidParam:t="enemyPosValid"
                dangerLookRange:p2=1.5, 2.5
              }
            }
          }
        }

        sequencer{
          name:t="gotoAttractRegion"

          ignoreChance{
            chance:r=0.2
          }

          findAttractRegionInZone{
            posParam:t="wanderingPosition"
            regionPos:t="am_bot__targetAttractRegionPos"
            radius:r=500
          }

          orderedSelector{
            sequencer{
              isRegionCenter{
                posParam:t="am_bot__targetAttractRegionPos"
              }

              findRandomNavmeshPointInRegionByEid{
                regionParam:t="am_bot__targetAttractRegionPos"
                posParam:t="wanderingPosition"
                radius:r=30
              }
            }

            findSafePosAroundAttractPos{
              attractPos:t="am_bot__targetAttractRegionPos"
              posParam:t="wanderingPosition"
              radius:r=30
            }
          }

          parallel{
            moveToPos{
              posParam:t="wanderingPosition"
              minStance:i=1
              lookVisc:r=0.1
              targetParam:t="lastShootEnemy"
              timeToLookAtTarget:r=4
              tryClimbing:b=yes
              dangerPosParam:t="enemyPos"
              dangerValidParam:t="enemyPosValid"
              dangerLookRange:p2=1.5, 2.5
            }

            not{
              wait{
                range:p2=100, 200
                resetable:b=yes
              }
            }
          }

          success{
            orderedSelector{
              sequencer{
                isRegionCenter{
                  posParam:t="am_bot__targetAttractRegionPos"
                }

                appendVisitedPos{
                  appendPos:t="am_bot__targetAttractRegionPos"
                }

                modifyNode{
                  target:t="am_bot__attractRegionStayTimer"
                  operator:t="="
                  arg:t="am_bot__attractRegionMinStayTime"
                }
              }

              modifyNode{
                target:t="am_bot__attractRegionStayTimer"
                operator:t="="
                arg:t="am_bot__attractPosMinStayTime"
              }
            }
          }
        }

        sequencer{
          name:t="gotoRandomPos"

          findRandomPosInsideZone{
            posParam:t="wanderingPosition"
            minDistanceFromZoneBorder:r=20
          }

          moveToPos{
            posParam:t="wanderingPosition"
            minStance:i=1
            lookVisc:r=0.1
            targetParam:t="lastShootEnemy"
            timeToLookAtTarget:r=4
            tryClimbing:b=yes
            dangerPosParam:t="enemyPos"
            dangerValidParam:t="enemyPosValid"
            dangerLookRange:p2=1.5, 2.5
          }
        }
      }

      selector{
        sequencer{
          findDanger{
            paramName:t="potentialEnemy"
            radiusParamName:t="enemyRadius"
            minDanger:r=0.1
          }

          selectNode{
            name:t="enemy_attack"
          }
        }

        wait{
          range:p2=0.1, 1
          resetable:b=yes
        }
      }
    }

    sequencer{
      orderedSelector{
        sequencer{
          isRegionCenter{
            posParam:t="am_bot__targetAttractRegionPos"
          }

          isNearAttractRegion{
            posParam:t="am_bot__targetAttractRegionPos"
          }

          not{
            isVisitedAttractPos{
              posParam:t="am_bot__targetAttractRegionPos"
            }
          }

          appendVisitedPos{
            appendPos:t="am_bot__targetAttractRegionPos"
          }

          modifyNode{
            target:t="am_bot__attractRegionStayTimer"
            operator:t="="
            arg:t="am_bot__attractRegionMinStayTime"
          }
        }

        sequencer{
          isNearPos{
            posParam:t="am_bot__targetAttractRegionPos"
            radius:r=35
          }

          not{
            isVisitedAttractPos{
              posParam:t="am_bot__targetAttractRegionPos"
            }
          }

          appendVisitedPos{
            appendPos:t="am_bot__targetAttractRegionPos"
          }

          modifyNode{
            target:t="am_bot__attractRegionStayTimer"
            operator:t="="
            arg:t="am_bot__attractPosMinStayTime"
          }
        }
      }
    }
  }

  sequencer{
    name:t="watch_loot"

    reaction{
      name:t="watch_loot_reaction"
      event:t="regularCheck"

      orderedSelector{
        findObstaclesAlongsidePath{}
        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    reaction{
      event:t="onAttract"

      recalculateTree{}
    }

    compareNode{
      lhs:t="am_bot__lootCount"
      operator:t="<"
      rhs:t="am_bot__extractAtLootCount"
    }

    setPosFromEntity{
      to:t="lootPosition"
      from:t="lootEntity"
    }

    moveToPos{
      posParam:t="lootPosition"
      minStance:i=1
      distThreshold:r=2.5
      lookVisc:r=0.1
      targetParam:t="lastShootEnemy"
      timeToLookAtTarget:r=4
      tryClimbing:b=yes
      dangerPosParam:t="enemyPos"
      dangerValidParam:t="enemyPosValid"
      dangerLookRange:p2=1.5, 2.5
    }

    isAgentInsideZone{
      checkZoneTargetState:b=no
    }

    parallel{
      lookAtEntity{
        targetParam:t="lootEntity"
      }

      wait{
        range:p2=0.5, 1
        resetable:b=yes
      }
    }

    orderedSelector{
      sequencer{
        isItemAm{
          targetParam:t="lootEntity"
        }

        parallel{
          gatherResource{
            targetParam:t="lootEntity"
          }

          lookAtEntity{
            targetParam:t="lootEntity"
          }

          wait{
            range:p2=5, 7
            resetable:b=yes
          }
        }

        modifyNode{
          target:t="am_bot__lootCount"
          operator:t="+"
          arg:r=1
        }

        compareNode{
          lhs:t="am_bot__lootCount"
          operator:t=">="
          rhs:t="am_bot__extractAtLootCount"
        }

        selectNode{
          name:t="go_to_extraction"
        }
      }

      sequencer{
        pickupItemEntity{
          targetParam:t="lootEntity"
        }

        wait{
          range:p2=0.5, 1
          resetable:b=yes
        }

        success{
          chooseBestWeapon{
            targetParam:t="lastShootEnemy"
          }
        }

        modifyNode{
          target:t="am_bot__lootCount"
          operator:t="+"
          arg:r=1
        }

        compareNode{
          lhs:t="am_bot__lootCount"
          operator:t=">="
          rhs:t="am_bot__extractAtLootCount"
        }

        selectNode{
          name:t="go_to_extraction"
        }
      }
    }
  }

  exitHandler{
    name:t="loot_from_interactable"

    sequencer{
      reaction{
        name:t="loot_from_interactable_reaction"
        event:t="regularCheck"

        orderedSelector{
          findObstaclesAlongsidePath{}
          subTree{
            treeName:t="sub.lootRaiderReactions"
          }
        }
      }

      reaction{
        event:t="onAttract"

        recalculateTree{}
      }

      compareNode{
        lhs:t="am_bot__lootCount"
        operator:t="<"
        rhs:t="am_bot__extractAtLootCount"
      }

      not{
        compareNode{
          lhsIntParam:t="interactableEntity"
          operator:t="=="
          rhs:i=0
        }
      }

      setPosFromEntity{
        to:t="interactablePosition"
        from:t="interactableEntity"
      }

      moveToPos{
        posParam:t="interactablePosition"
        minStance:i=1
        distThreshold:r=1
        lookVisc:r=0.1
        targetParam:t="lastShootEnemy"
        timeToLookAtTarget:r=4
        tryClimbing:b=yes
        dangerPosParam:t="enemyPos"
        dangerValidParam:t="enemyPosValid"
        dangerLookRange:p2=1.5, 2.5
      }

      parallel{
        lookAtEntity{
          targetParam:t="interactableEntity"
        }

        wait{
          range:p2=0.5, 1
          resetable:b=yes
        }
      }

      openInteractableWithLoot{
        targetParam:t="interactableEntity"
      }

      success{
        repeatUntilFail{
          lootFromInteractable{
            targetParam:t="interactableEntity"
          }

          wait{
            range:p2=0.5, 1
            resetable:b=yes
          }

          success{
            chooseBestWeapon{
              targetParam:t="lastShootEnemy"
            }
          }

          modifyNode{
            target:t="am_bot__lootCount"
            operator:t="+"
            arg:r=1
          }

          compareNode{
            lhs:t="am_bot__lootCount"
            operator:t="<"
            rhs:t="am_bot__extractAtLootCount"
          }
        }
      }

      compareNode{
        lhs:t="am_bot__lootCount"
        operator:t=">="
        rhs:t="am_bot__extractAtLootCount"
      }

      selectNode{
        name:t="go_to_extraction"
      }
    }

    sequencer{
      setIntVar{
        to:t="interactableEntity"
        value:i=0
      }
    }
  }

  sequencer{
    name:t="go_to_extraction"

    reaction{
      name:t="extraction_reaction"
      event:t="regularCheck"

      orderedSelector{
        findObstaclesAlongsidePath{}
        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    reaction{
      event:t="onAttract"

      recalculateTree{}
    }

    compareNode{
      lhs:t="am_bot__lootCount"
      operator:t=">="
      rhs:t="am_bot__extractAtLootCount"
    }

    findExtractionPoint{
      posParam:t="extractionPos"
    }

    moveToPos{
      posParam:t="extractionPos"
      minStance:i=1
      lookVisc:r=0.1
      targetParam:t="lastShootEnemy"
      timeToLookAtTarget:r=4
      tryClimbing:b=yes
      dangerPosParam:t="enemyPos"
      dangerValidParam:t="enemyPosValid"
      dangerLookRange:p2=1.5, 2.5
      distThreshold:r=2.5
    }

    isAgentInsideZone{
      checkZoneTargetState:b=no
    }

    activateNearestExtractionPoint{}
    wait{
      range:p2=1, 2
      resetable:b=yes
    }
  }

  sequencer{
    name:t="wander_around_extraction"

    reaction{
      name:t="extraction_reaction"
      event:t="regularCheck"

      orderedSelector{
        findObstaclesAlongsidePath{}
        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    reaction{
      event:t="onAttract"

      recalculateTree{}
    }

    compareNode{
      lhs:t="am_bot__lootCount"
      operator:t=">="
      rhs:t="am_bot__extractAtLootCount"
    }

    orderedSelector{
      sequencer{
        name:t="extracting"

        findExtractionPoint{
          posParam:t="extractionPos"
          reqActiveState:b=yes
        }

        moveToPos{
          posParam:t="extractionPos"
          minStance:i=1
          lookVisc:r=0.1
          targetParam:t="lastShootEnemy"
          timeToLookAtTarget:r=4
          tryClimbing:b=yes
          dangerPosParam:t="enemyPos"
          dangerValidParam:t="enemyPosValid"
          dangerLookRange:p2=1.5, 2.5
        }

        wait{
          range:p2=0.5, 1.5
          resetable:b=yes
        }
      }

      sequencer{
        name:t="wandering_around_extraction"

        findExtractionPoint{
          posParam:t="extractionPos"
        }

        findRandomNavmeshPoint{
          posParam:t="wanderingPosition"
          dist:r=5
        }

        moveToPos{
          posParam:t="wanderingPosition"
          minStance:i=1
          lookVisc:r=0.1
          targetParam:t="lastShootEnemy"
          timeToLookAtTarget:r=4
          tryClimbing:b=yes
          dangerPosParam:t="enemyPos"
          dangerValidParam:t="enemyPosValid"
          dangerLookRange:p2=1.5, 2.5
        }

        wait{
          range:p2=0.5, 1.5
          resetable:b=yes
        }
      }
    }
  }

  repeatUntilFail{
    name:t="load_ammo_magazines"

    reaction{
      name:t="load_ammo_reaction"
      event:t="regularCheck"

      orderedSelector{
        failed{
          chooseBestWeapon{}
        }

        subTree{
          treeName:t="sub.lootRaiderReactions"
        }
      }
    }

    loadMagazine{}
    wait{
      range:p2=0.5, 1
      resetable:b=yes
    }
  }
}

orderedSelector{
  name:t="sub.lootRaiderReactions"

  sequencer{
    name:t="burning_rc"

    isBurning{}
    recalculateTree{}
  }

  sequencer{
    name:t="danger_rc"

    orderedSelector{
      sequencer{
        findDanger{
          paramName:t="newEnemy"
          radiusParamName:t="enemyRadius"
          minDanger:r=0.7
        }

        copyIntVar{
          to:t="prevEnemy"
          from:t="shootEnemy"
        }

        chooseDanger{
          lhsParam:t="shootEnemy"
          rhsParam:t="newEnemy"
          outParam:t="potentialEnemy"
          diff:r=0.2
          minDanger:r=0.1
        }

        ifThenElse{
          chooseBestWeapon{
            targetParam:t="potentialEnemy"
          }

          sequencer{
            speak{
              effect:t="seeDanger"
              timeMinMax:p2=6, 10
            }

            orderedSelector{
              isVarsIntEqual{
                lhs:t="prevEnemy"
                rhs:t="potentialEnemy"
              }

              recalculateTree{}
            }
          }

          sequencer{
            setPosFromEntity{
              to:t="enemyPosition"
              from:t="potentialEnemy"
            }

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=20
            }

            recalculateTree{}
          }
        }
      }

      sequencer{
        checkTarget{
          targetUnitParam:t="shootEnemy"
        }

        setIntVar{
          to:t="shootEnemy"
          value:i=0
        }

        chooseBestWeapon{
          targetParam:t="shootEnemy"
          allowMelee:b=yes
        }

        recalculateTree{}
      }
    }
  }

  sequencer{
    not{
      isAgentInsideZone{
        checkZoneTargetState:b=no
      }
    }

    recalculateTree{}
  }
}
