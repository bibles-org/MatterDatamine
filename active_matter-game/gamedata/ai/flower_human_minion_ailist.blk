repeat{
  name:t="flower_human_minion"
  selectStrategy:t="ordered"

  reaction{
    event:t="regularCheck"

    orderedSelector{
      failed{
        findDoorObstacle{
          traceDist:r=1.5
        }
      }

      subTree{
        treeName:t="sub.recalculateTreeOnStuck"
      }

      sequencer{
        findDanger{
          paramName:t="enemy"
          radiusParamName:t="enemyRadius"
          minDanger:r=0.1
          tag:t="human"
        }

        selectNode{
          name:t="fightEnemies"
        }
      }

      sequencer{
        compareNode{
          lhs:t="sleep_mode__triggered"
          operator:t="=="
          rhs:b=yes
        }

        selectNode{
          name:t="goToTrigger"
        }
      }
    }
  }

  reaction{
    event:t="onAttract"

    sequencer{
      doesEntityExist{
        targetEcsComponent:t="attract_point__eid"
      }

      selectNode{
        name:t="goToAttract"
      }
    }
  }

  reaction{
    event:t="onTraceableDanger"

    selectNode{
      name:t="fightEnemies"
    }
  }

  reaction{
    event:t="onHit"

    selectNode{
      name:t="fightEnemies"
    }
  }

  sequencer{
    name:t="fightEnemies"

    reaction{
      event:t="onHit"

      setTimer{
        target:t="flower_human__abandonAttackTimer"
        deltaTime:r=25
      }
    }

    reaction{
      event:t="onAttract"

      success{}
    }

    reaction{
      event:t="onTraceableDanger"

      success{}
    }

    reaction{
      event:t="regularCheck"

      orderedSelector{
        subTree{
          treeName:t="sub.abandonAttacking"
        }

        failed{
          findDoorObstacle{
            traceDist:r=1.5
          }
        }

        subTree{
          treeName:t="sub.recalculateTreeOnStuck"
        }
      }
    }

    setTimer{
      target:t="flower_human__abandonAttackTimer"
      deltaTime:r=25
    }

    subTree{
      treeName:t="sub.flower_human_minion_find_enemy_and_attack"
    }
  }

  sequencer{
    name:t="goToTrigger"

    reaction{
      event:t="regularCheck"

      sequencer{
        failed{
          findDoorObstacle{
            traceDist:r=1.5
          }
        }

        subTree{
          treeName:t="sub.recalculateTreeOnStuck"
        }
      }
    }

    compareNode{
      lhs:t="sleep_mode__triggered"
      operator:t="=="
      rhs:b=yes
    }

    parallel{
      nPhysCorridorMoveToPosWithNavmeshMapping{
        posParam:t="sleep_mode__triggerPoint"
        forceToWalk:b=no
        stopDist:r=0.4
      }

      wait{
        range:p2=20, 20
        resetable:b=yes
      }
    }

    wait{
      range:p2=1, 2
      resetable:b=yes
    }
  }

  sequencer{
    name:t="goToAttract"

    doesEntityExist{
      targetEcsComponent:t="attract_point__eid"
    }

    parallel{
      nPhysCorridorMoveToPosWithNavmeshMapping{
        posParam:t="attract_point__targetPos"
      }

      wait{
        range:p2=20, 20
        resetable:b=yes
      }
    }

    wait{
      range:p2=1, 2
      resetable:b=yes
    }
  }

  sequencer{
    name:t="goHome"

    subTree{
      treeName:t="sub.flower_human_minion_run_to_boss_or_go_to_home"
    }

    wait{
      range:p2=1, 2
      resetable:b=yes
    }

    sleepModeGoSleep{}
  }
}

sequencer{
  name:t="sub.flower_human_minion_run_to_boss_or_go_to_home"

  orderedSelector{
    sequencer{
      modifyNode{
        targetIntParam:t="boss"
        operator:t="="
        arg:t="miniboss_minion__bossEid"
      }

      not{
        targetIsSleeping{
          targetParam:t="boss"
        }
      }

      checkAlive{
        targetParam:t="miniboss_minion__bossEid"
      }

      nPhysCorridorMoveToTargetWithNavmeshMapping{
        targetParam:t="miniboss_minion__bossEid"
        stopDist:r=3
        loseInvisibleTarget:b=no
      }

      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      selectNode{
        name:t="fightEnemies"
      }
    }

    subTree{
      treeName:t="sub.goToHome"
    }
  }
}

exitHandler{
  name:t="sub.flower_human_minion_find_enemy_and_attack"

  sequencer{
    orderedSelector{
      sequencer{
        getReactionOffender{}
        modifyNode{
          targetIntParam:t="enemy"
          operator:t="="
          arg:t="agent_dangers__lastReactionOffender"
        }
      }

      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
        tag:t="human"
      }
    }

    modifyNode{
      target:t="walker_agent__potentialTargetEid"
      operator:t="="
      argIntParam:t="enemy"
    }

    orderedSelector{
      sequencer{
        name:t="approach_for_melee_attack"

        nMeshFindPointNearTargetWithNavmeshMapping{
          posParam:t="walker_agent__targetPos"
          dist:p2=2.75, 2.75
          targetParam:t="walker_agent__potentialTargetEid"
          reusePrevPos:b=yes
        }

        modifyNode{
          target:t="walker_agent__targetEid"
          operator:t="="
          argIntParam:t="enemy"
        }

        speak{
          effect:t="seeDanger"
          timeMinMax:p2=6, 10
        }

        subTree{
          treeName:t="sub.flower_human_minion_attack_state"
        }
      }

      sequencer{
        modifyNode{
          target:t="walker_agent__targetEid"
          operator:t="="
          argIntParam:t="enemy"
        }

        nPhysPrepareOffmeshJumping{
          name:t="nPhysPrepareJumpingBetweenNMeshIslands"
        }

        nPhysCorridorMoveToPosWithNavmeshMapping{
          posParam:t="walker_agent__climbingFrom"
          forceToWalk:b=no
          stopDist:r=0.6
        }

        nPhysLookAtEntityWithPositionMapping{
          targetParam:t="walker_agent__targetEid"
        }

        performOffmeshJumping{
          name:t="performJumping"
        }

        subTree{
          treeName:t="sub.flower_human_minion_attack_melee_default"
        }

        subTree{
          treeName:t="sub.return_to_navmesh"
        }
      }

      failed{
        modifyNode{
          target:t="walker_agent__targetEid"
          operator:t="="
          arg:i=0
        }
      }

      sequencer{
        name:t="hide_away"

        subTree{
          treeName:t="sub.return_to_navmesh"
        }

        reaction{
          event:t="regularCheck"

          orderedSelector{
            failed{
              findDoorObstacle{
                traceDist:r=1.5
              }
            }

            sequencer{
              isNphysEnabled{}
              compareNode{
                lhs:t="stuck_detector_debug__enabled"
                operator:t=">"
                rhs:r=0
              }

              compareNode{
                lhs:t="stuck_detector__value"
                operator:t=">"
                rhs:r=0.55
              }

              modifyNode{
                target:t="stuck_detector__value"
                operator:t="="
                arg:r=0
              }

              findSafePos{
                posParam:t="zone_patroller__spawnPos"
                enemyParam:t="walker_agent__potentialTargetEid"
                defaultPosParam:t="zone_patroller__spawnPos"
                overwrite:b=yes
              }

              recalculateTree{}
            }
          }
        }

        success{
          repeatUntilFail{
            count:i=2

            not{
              findSafePos{
                posParam:t="zone_patroller__spawnPos"
                enemyParam:t="walker_agent__potentialTargetEid"
                defaultPosParam:t="zone_patroller__spawnPos"
              }
            }

            success{
              sequencer{
                checkDistanceToPos{
                  posParam:t="zone_patroller__spawnPos"
                  radius:r=0.1
                }

                wait{
                  range:p2=1, 2
                  resetable:b=yes
                }
              }
            }

            nPhysCorridorMoveToPosWithNavmeshMapping{
              posParam:t="zone_patroller__spawnPos"
              forceToWalk:b=no
              stopDist:r=0.25
            }
          }
        }

        nPhysCorridorMoveToPosWithNavmeshMapping{
          posParam:t="zone_patroller__spawnPos"
          forceToWalk:b=no
          stopDist:r=0.25
        }

        wait{
          range:p2=1, 2
          resetable:b=yes
        }

        sleepModeGoSleep{}
      }
    }
  }

  modifyNode{
    target:t="walker_agent__targetEid"
    operator:t="="
    arg:i=0
  }
}

sequencer{
  name:t="sub.flower_human_minion_attack_state"

  repeatUntilFail{
    count:i=3

    sequencer{
      randomSelector{
        subTree{
          treeName:t="sub.flower_human_minion_attack_melee_default"
        }

        subTree{
          treeName:t="sub.flower_human_minion_attack_melee_run"
        }
      }

      parallel{
        nPhysStareAtEntity{
          targetParam:t="walker_agent__targetEid"
        }

        wait{
          range:p2=0.2, 0.3
          resetable:b=yes
        }
      }
    }
  }
}

sequencer{
  name:t="sub.flower_human_minion_attack_melee_default"

  nMeshFindPointNearTargetWithNavmeshMapping{
    posParam:t="walker_agent__targetPos"
    oppositePoint:b=no
    angleRangeSpread:p2=-10, 10
    dist:p2=2.75, 2.75
    targetParam:t="walker_agent__targetEid"
  }

  nPhysCorridorMoveToPosWithNavmeshMapping{
    posParam:t="walker_agent__targetPos"
    forceToWalk:b=no
    stopDist:r=0.25
  }

  parallel{
    nPhysStareAtEntity{
      targetParam:t="walker_agent__targetEid"
    }

    wait{
      range:p2=0.1, 0.15
      resetable:b=yes
    }
  }

  checkDistanceToTarget{
    targetParam:t="walker_agent__targetEid"
    radius:r=2.9
  }

  parallel{
    nPhysStareAtEntity{
      targetParam:t="walker_agent__targetEid"
    }

    wait{
      range:p2=0.1, 0.15
      resetable:b=yes
    }
  }

  parallel{
    join{
      applyGameAffect{
        templateName:t="flower_human_stationary_attack_short_anim"
        duration:p2=1, 1.2
        affectParam:t="flower_human__stationaryAttackAnimEid"
      }

      applyGameAffect{
        templateName:t="flower_human_stationary_damage_attack"
        delay:p2=0.1, 0.2
        affectParam:t="flower_human__stationaryDamageAttackEid"
      }

      applyGameAffect{
        templateName:t="flower_human_stationary_damage_attack"
        delay:p2=0.4, 0.5
        affectParam:t="flower_human__stationaryDamageAttack2Eid"
      }
    }

    nPhysStareAtEntity{
      targetParam:t="walker_agent__targetEid"
    }
  }

  sequencer{
    destroyGameAffect{
      affectParam:t="flower_human__stationaryAttackAnimEid"
    }

    destroyGameAffect{
      affectParam:t="flower_human__stationaryDamageAttackEid"
    }

    destroyGameAffect{
      affectParam:t="flower_human__stationaryDamageAttack2Eid"
    }
  }

  parallel{
    nPhysStareAtEntity{
      targetParam:t="walker_agent__targetEid"
    }

    wait{
      range:p2=0.2, 0.45
      resetable:b=yes
    }
  }
}

sequencer{
  name:t="sub.flower_human_minion_attack_melee_run"

  sequencer{
    repeatUntilFail{
      count:i=2

      randomSelector{
        sequencer{
          nMeshFindPointNearTargetWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            oppositePoint:b=no
            angleRangeSpread:p2=-10, -5
            dist:p2=7, 8
            targetParam:t="walker_agent__targetEid"
          }

          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            forceToWalk:b=no
          }

          checkTarget{
            targetUnitParam:t="enemy"
          }

          parallel{
            nPhysStareAtEntity{
              targetParam:t="walker_agent__targetEid"
            }

            wait{
              range:p2=0.2, 0.45
              resetable:b=yes
            }
          }

          applyGameAffect{
            templateName:t="flower_human_run_attack_anim_long"
          }

          randomSelector{
            applyGameAffect{
              templateName:t="flower_human_confusion_run_attack_long"
            }

            applyGameAffect{
              templateName:t="flower_human_concussion_run_attack_long"
            }
          }

          nMeshFindPointNearTargetWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            oppositePoint:b=yes
            angleRangeSpread:p2=10, 15
            dist:p2=4, 5
            targetParam:t="walker_agent__targetEid"
          }

          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            forceToWalk:b=no
          }
        }

        sequencer{
          nMeshFindPointNearTargetWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            oppositePoint:b=no
            angleRangeSpread:p2=10, 5
            dist:p2=7, 8
            targetParam:t="walker_agent__targetEid"
          }

          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            forceToWalk:b=no
          }

          checkTarget{
            targetUnitParam:t="enemy"
          }

          parallel{
            nPhysStareAtEntity{
              targetParam:t="walker_agent__targetEid"
            }

            wait{
              range:p2=0.2, 0.45
              resetable:b=yes
            }
          }

          applyGameAffect{
            templateName:t="flower_human_run_attack_anim_long"
          }

          randomSelector{
            applyGameAffect{
              templateName:t="flower_human_confusion_run_attack_long"
            }

            applyGameAffect{
              templateName:t="flower_human_concussion_run_attack_long"
            }
          }

          nMeshFindPointNearTargetWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            oppositePoint:b=yes
            angleRangeSpread:p2=-10, -15
            dist:p2=4, 5
            targetParam:t="walker_agent__targetEid"
          }

          nPhysCorridorMoveToPosWithNavmeshMapping{
            posParam:t="walker_agent__targetPos"
            forceToWalk:b=no
          }
        }
      }
    }
  }

  parallel{
    nPhysStareAtEntity{
      targetParam:t="walker_agent__targetEid"
    }

    wait{
      range:p2=0.2, 0.45
      resetable:b=yes
    }
  }
}
