
options indenting = 2
options gc
options persistent_heap
require %daslib/strings_boost

var
  DAS_PAK_ROOT = "."
  reqCount = 0

let
  commonMountPointPrefixes <- {
    "ecs" => "%dasGameLibs/ecs",
    "docs" => "%dasGameLibs/docs",
    "math" => "%dasGameLibs/math",
    "daFrameGraph" => "%dasGameLibs/daFrameGraph",
    "daslib" => "%daslib",
    "imgui" => "%dasImgui",
    "debug" => "%dngdas/debug",
    "remote" => "%dngdas/remote"
  }
  commonAliasPath <- {
    "daFrameGraph" => "%dasGameLibs/daFrameGraph.daFG.das"
  }


[export]
def module_get(req, from : string) : tuple<string; string; string> const
  reqCount += 1
  if reqCount > 1000
    unsafe
      heap_collect(true, false)
    reqCount = 0

  let aliasPath = commonAliasPath?[req] ?? ""
  if aliasPath != ""
    return (req, aliasPath, "")

  var rs <- split_by_chars(req, "./")
  let path_name = join(rs, "/") + ".das"
  if length(rs) <= 1
    return (req, path_name, "")

  let mod_name = rs[length(rs) - 1]

  if is_in_aot() && (path_name == "daslib/debug.das" || path_name |> ends_with("profiler.das"))
    return ("", "", "")

  if rs[0] == "%daslib"
    rs[0] = commonMountPointPrefixes?["daslib"] ?? rs[0]

  if starts_with(req, "%")
    return (mod_name, path_name, "")

  let alias_name = rs[length(rs) - 1]
  var prefix = unsafe(commonMountPointPrefixes?[rs[0]])
  if prefix == null
    prefix = unsafe(mountPointPrefixes?[rs[0]])
  if prefix != null
    rs |> erase(0)
    return (mod_name, "{*prefix}/{join(rs,"/")}.das", alias_name)

  return (mod_name, "{DAS_PAK_ROOT}{join(rs,"/")}.das", alias_name)


[export]
def include_get(inc, from : string) : string
  return starts_with(inc, "%") ? inc : "{DAS_PAK_ROOT}{inc}"
